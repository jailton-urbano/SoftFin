@model SoftFin.Web.Models.Pessoa
@{
    ViewBag.Title = "Pessoa - Novo";
    ViewBag.Helplink = "https://softfin.zendesk.com/hc/pt-br/articles/202861895-Como-cadastrar-uma-Pessoa";
}



@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <div class="container-fluid">
            @RenderPage("~/Views/Shared/_BotoesInclusao.cshtml")
            <div class="row" >
                <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.TipoPessoa_ID)

                        @Html.DropDownList("TipoPessoa_ID", ViewData["TipoPessoa"] as SelectList, new { @class = "form-control" })  
                        @*@Html.TextBoxFor(model => model.id_EMPRESA)*@
                        @Html.ValidationMessageFor(model => model.TipoPessoa_ID)
                </div>

                <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.CategoriaPessoa_ID)

                        @Html.DropDownList("CategoriaPessoa_id", ViewData["CategoriaPessoa"] as SelectList, new { @class = "form-control" })  
                        @*@Html.TextBoxFor(model => model.id_EMPRESA)*@
                        @Html.ValidationMessageFor(model => model.CategoriaPessoa_ID)
                </div>
                <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.UnidadeNegocio_ID)

                        @Html.DropDownList("UnidadeNegocio_ID", ViewData["UnidadeNegocio"] as SelectList, new { @class = "form-control" })  
                        @*@Html.TextBoxFor(model => model.id_EMPRESA)*@
                        @Html.ValidationMessageFor(model => model.UnidadeNegocio_ID)
                </div>


            </div>
            <div class="row">
                
                <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.codigo)

                        @Html.TextBoxFor(model => model.codigo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.codigo)
                </div>
                <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.nome)

                        @Html.TextBoxFor(model => model.nome, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.nome)
                </div>

                <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.razao)

                        @Html.TextBoxFor(model => model.razao, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.razao)
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.cep)
                        
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.cep, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.cep)
                            <span class="input-group-btn">
                                <a id="btnCep" name="btnCep" class="btn btn-default" role="button">Pesquisar</a>
                            </span>
                        </div>
                </div>

                <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.TipoEndereco_ID)

                        @Html.DropDownList("TipoEndereco_id", ViewData["TipoEndereco"] as SelectList, new { @class = "form-control" })  
                        @*@Html.TextBoxFor(model => model.id_EMPRESA)*@
                        @Html.ValidationMessageFor(model => model.TipoEndereco_ID)
                </div>
                 <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.endereco)

                        @Html.TextBoxFor(model => model.endereco, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.endereco)
                </div>  

            </div>

            <div class="row">
                <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.numero)

                        @Html.TextBoxFor(model => model.numero, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.numero)
                </div>
                <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.complemento)

                        @Html.TextBoxFor(model => model.complemento, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.complemento)
                </div>
                <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.bairro)

                        @Html.TextBoxFor(model => model.bairro, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.bairro)
                </div>
            </div>
            <div class="row">
                <div class="col-md-1 form-group">
                        @Html.LabelFor(model => model.uf)

                        @Html.TextBoxFor(model => model.uf, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.uf)
                </div>

                <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.cidade)

                        @Html.TextBoxFor(model => model.cidade, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.cidade)
                </div>

                <div class="col-md-5 form-group">
                        @Html.LabelFor(model => model.eMail)

                        @Html.TextBoxFor(model => model.eMail, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.eMail)
                </div>
             </div>
               
            <div class="row">
                <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.TelefoneFixo)

                        @Html.TextBoxFor(model => model.TelefoneFixo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TelefoneFixo)
                </div>
                <div class="col-md-3     form-group">
                        @Html.LabelFor(model => model.Celular)

                        @Html.TextBoxFor(model => model.Celular, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Celular)
                </div>
             
                <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.cnpj)
                        

                        @Html.TextBoxFor(model => model.cnpj, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.cnpj)    
                        <span id="ErroCNPJ" name="ErroCNPJ" class="field-validation-error" ></span>
                </div>
                <div class="col-md-2 form-group">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.inscricao)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.inscricao, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.inscricao)
                    </div>
                </div>
                 <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.ccm)

                        @Html.TextBoxFor(model => model.ccm, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ccm)
                 </div>


            </div>
            <div class="row">
                <div class='col-md-2 form-group'>
                    @Html.LabelFor(x => x.bancoConta)
                   
                    @Html.TextBoxFor(x => x.bancoConta, null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.bancoConta)
                </div>
                <div class='col-md-2 form-group'>
                    @Html.LabelFor(x => x.agenciaConta)
                   
                    @Html.TextBoxFor(x => x.agenciaConta, null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.agenciaConta)
                </div>
                <div class='col-md-1 form-group'>
                    @Html.LabelFor(x => x.agenciaDigito)
                   
                    @Html.TextBoxFor(x => x.agenciaDigito, null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.agenciaDigito)
			    </div>
                <div class='col-md-2 form-group'>
                    @Html.LabelFor(x => x.contaBancaria)
                   
                    @Html.TextBoxFor(x => x.contaBancaria, null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.contaBancaria)
                </div>
                <div class='col-md-2 form-group'>
                    @Html.LabelFor(x => x.digitoContaBancaria)
                   
                    @Html.TextBoxFor(x => x.digitoContaBancaria, null, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.digitoContaBancaria)
                </div>
             
            </div>



            @RenderPage("~/Views/Shared/_BotoesInclusao.cshtml")
         </div>
    </fieldset>
}

<script>
    $(document).ready(function () {
        Metronic.init(); // init metronic core components
        Layout.init(); // init current layout
        QuickSidebar.init(); // init quick sidebar
    });
</script>


<script>
    function ValidarCNPJ(ObjCnpj) {
        var cnpj = ObjCnpj  ;
        var valida = new Array(6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2);
        var dig1 = new Number;
        var dig2 = new Number;

        exp = /\.|\-|\//g
        cnpj = cnpj.toString().replace(exp, "");
        var digito = new Number(eval(cnpj.charAt(12) + cnpj.charAt(13)));

        for (i = 0; i < valida.length; i++) {
            dig1 += (i > 0 ? (cnpj.charAt(i - 1) * valida[i]) : 0);
            dig2 += cnpj.charAt(i) * valida[i];
        }
        dig1 = (((dig1 % 11) < 2) ? 0 : (11 - (dig1 % 11)));
        dig2 = (((dig2 % 11) < 2) ? 0 : (11 - (dig2 % 11)));

        if (((dig1 * 10) + dig2) != digito)
            return false;
        else
            return true;

    }

    function ValidarCPF(Objcpf) {
        var cpf = Objcpf;
        exp = /\.|\-/g
        cpf = cpf.toString().replace(exp, "");
        var Soma;
        var Resto;
        Soma = 0;
        var strCPF = cpf;
        //if (strCPF == "00000000000")
        //    return false;

        for (i = 1; i <= 9; i++)
            Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
        Resto = (Soma * 10) % 11;
        if ((Resto == 10) || (Resto == 11)) Resto = 0;
        if (Resto != parseInt(strCPF.substring(9, 10)))
            return false;

        Soma = 0;
        for (i = 1; i <= 10; i++)
            Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (12 - i);
        Resto = (Soma * 10) % 11;
        if ((Resto == 10) || (Resto == 11)) Resto = 0;
        if (Resto != parseInt(strCPF.substring(10, 11)))
            return false;
        return true;


    }

    $( document ).ready(function() {

        $("form").submit(function (event) {
            $("#ErroCNPJ").hide()
            var cnpj = $("#cnpj").val();
            if (cnpj == "")
                return;

            if ($("#CategoriaPessoa_id option:selected").text() != "Física") {
                if (ValidarCNPJ(cnpj)) {
                    return;
                }
                $("#ErroCNPJ").text("CNPJ Inválido!").show();
            } else {
                debugger
                if (ValidarCPF(cnpj)) {
                    return;
                }
                $("#ErroCNPJ").text("CPF Inválido!").show();
            }
        
            event.preventDefault();

        });

    
        $("#cnpj").attr("style", "text-align:right");
        $("#cnpj").keyup(
            function (event) {
                if ($("#CategoriaPessoa_id option:selected").text() == "Física") {
                    $("#cnpj").attr("maxlength", "14");
                    formataCPF(this, event);
                } else {
                    $("#cnpj").attr("maxlength", "18");
                    formataCNPJ(this, event);
                }
            }
        );

        $("#btnCep").click(function () {
            var ender = 'https://correiosapi.apphb.com/cep/' + $('#cep').val().replace('-','');
            $.ajax({
                url: ender,
                dataType: 'jsonp',
                crossDomain: true,
                contentType: "application/json",
                statusCode: {
                    200: function (data) { carregaCampo(data); } // Ok
                , 400: function (msg) { console.log(msg); } // Bad Request
                , 404: function (msg) { console.log("CEP não encontrado!!"); } // Not Found
                }
            });
        });
        function carregaCampo(data)
        {
            $('#endereco').val(data.logradouro);
            $('#bairro').val(data.bairro);
            $('#cidade').val(data.cidade);
            $('#uf').val(data.estado);
        };
        $("#cep").attr("maxlength", "9");
        $("#cep").attr("style", "text-align:right");
        $("#cep").keydown(
            function (event) {
                formataCEP(this, event);
            }
        );

    });
</script>
<div class="alert alert-info">
    @ViewBag.msg
</div>